{
  "env": {
    "browser": true,     // browser global variables.
  },

  "globals": {
    "browser": true,
    "chrome": true,
  },

  "plugins": [
  ],

  "parserOptions": {
    "ecmaVersion": 6
  },

  "rules": {
    ////////// Possible Errors //////////
    "comma-dangle": 2,         // disallow trailing commas in object literals
    "no-cond-assign": 2,          // disallow assignment in conditional expressions
    "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
    "no-empty": 2,                // disallow empty statements
    "no-extra-parens": 2,         // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,           // disallow unnecessary semicolons
    "no-func-assign": 2,          // disallow overwriting functions written as function declarations
    "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": 1,        // disallow reserved words being used as object literal keys (off by default)
    "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
    "valid-jsdoc": 1,             // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string

    ////////// Best Practices //////////
    "block-scoped-var": 2,      // treat var statements as if they were block scoped (off by default)
    "consistent-return": 2,     // require return statements to either always or never specify values
    "curly": [1, "multi"],                 // specify curly brace conventions for all control statements
    "default-case": 2,          // require default case in switch statements (off by default)
    "dot-notation": 2,          // encourages use of dot notation whenever possible
    "eqeqeq": 2,                // require the use of === and !==
    "guard-for-in": 1,          // make sure for-in loops have an if statement (off by default)
    "no-alert": 1,              // disallow the use of alert, confirm, and prompt
    "no-caller": 1,             // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 1,          // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2,        // disallow else after a return in an if (off by default)
    "no-eq-null": 1,            // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2,               // disallow use of eval()
    "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 1,       // disallow use of eval()-like methods
    "no-lone-blocks": 1,        // disallow unnecessary nested blocks
    "no-loop-func": 2,          // disallow creation of functions within loops
    "no-multi-spaces": 2,       // disallow use of multiple spaces
    "no-native-reassign": 1,    // disallow reassignments of native objects
    "no-new": 1,                // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 1,           // disallow use of new operator for Function object
    "no-new-wrappers": 2,       // disallows creating new instances of String, Number, and Boolean
    "no-proto": 2,              // disallow usage of __proto__ property
    "no-redeclare": [1, {"builtinGlobals": false}],          // disallow declaring the same variable more then once
    "no-return-assign": 2,      // disallow use of assignment in return statement
    "vars-on-top": 2,           // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 1,             // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 1,                  // require or disallow Yoda conditions

    ////////// Strict Mode //////////
    "strict": [2, "global"],          // controls location of Use Strict Directives

    ////////// Variables //////////
    "no-catch-shadow": 1,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 1,               // disallow deletion of variables
    "no-label-var": 1,                // disallow labels that share a name with a variable
    "no-shadow": 1,                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 1,  // disallow shadowing of names such as arguments
    "no-unused-vars": 2,              // disallow declaration of variables that are not used in the code
    "no-use-before-define": 1,        // disallow use of variables before they are defined

    ////////// Stylistic Issues //////////
    "brace-style": 2,               // enforce one true brace style (off by default)
    "camelcase": 2,                 // require camel case names
    "comma-style": [2, "last"],     // enforce one true comma style (off by default)
    "consistent-this": 1,           // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2,                  // enforce newline at the end of file, with no multiple empty lines
    "func-names": 1,                // require function expressions to have a name (off by default)
    "func-style": [1, "declaration"], // enforces use of function declarations or expressions (off by default)
    "key-spacing": 1,               // enforces spacing between keys and values in object literal properties
    "new-cap": 2,                   // require a capital letter for constructors
    "new-parens": 1,                // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 2,      // disallow use of the Array constructor
    "no-mixed-spaces-and-tabs": 2,  // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 2,   // disallow multiple empty lines (off by default)
    "no-new-object": 2,             // disallow use of the Object constructor
    "semi-spacing": 2,      // disallow space before semicolon
    "no-spaced-func": 2,            // disallow space between function identifier and application
    "no-trailing-spaces": 1,        // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 1,      // disallow dangling underscores in identifiers
    "operator-assignment": 1,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 1,             // enforce padding within blocks (off by default)
    "quote-props": [1, "as-needed"],               // require quotes around object literal property names (off by default)
    "semi": [2, "always"],                      // require or disallow use of semicolons instead of ASI
    "space-in-brackets": [1, "never"],         // require or disallow spaces inside brackets (off by default)
    "space-infix-ops": [2, {"int32Hint": false}],           // require spaces around operators

    ////////// ECMAScript 6 //////////
    "no-var": 2,          // require let or const instead of var (off by default)
    "generator-star": 1,  // enforce the position of the * in generator functions (off by default)
  }
}
